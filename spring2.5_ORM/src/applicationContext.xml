<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

  <!-- 
     ORM 模組對 Hibernate、JDO、TopLink、iBatis 等 ORMFramework 提供支援。
     本節以 Hibernate 為例介紹 ORM 模組。 Spring 支援的 ORM 方式類似於對 JDBC 的支援，
     例如在 DAO 層提供 HibernateDaoSupport 類別與 HibernateTemplate 類別。
     
     ORM 查組相依於 dom4j-1.6.jar 、antlr.jar、MyEclipse 附帶的 Spring ORM 類別函式庫可能沒有這兩個類別函式庫，需要自己增加。

   -->






  <!-- 資料庫連線設定 -->
  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  destroy-method="close" >
    <property name="driverClassName"    value="com.mysql.jdbc.Driver"                                             />
    <property name="url"                value="jdbc:mysql://localhost:3306/spring2_orm?characterEncoding=UTF-8"   />
    <property name="username"           value="root"                                                              />
    <property name="password"           value="19786779"                                                          />
  </bean>



  <!--  SessionFactory 實現類別  -->
  <bean id="sessionFactoryBean" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean" destroy-method="destroy" >   
    
    <!-- 資料庫 -->
    <property name="dataSource" >
      <ref bean="dataSource" />
    </property>
    
    <!-- 該 Package 下所有類別都會被當作實體類別表載入  -->
    <property name="annotatedPackages" value="classpath:/com/spring/orm/annotated" />
    
    <!-- 載入所設定實體類別 -->
    <property name="annotatedClasses" >
      <list>
        <value>com.spring.orm.entity.Cat</value>    <!-- 設定 Cat 類別 -->
      </list>
    </property>
    
    <!-- Hibernate 屬性 -->
    <property name="hibernateProperties" >
      <props>
        <prop key="hibernate.dialect" >org.hibernate.dialect.MySQLDialect</prop>  <!-- SQL 方言 -->
        <prop key="hibernate.show_sql" >true</prop>                               <!-- 輸出 SQL 敘述 -->
        <prop key="hibernate.format_sql" >true</prop>                             <!-- 格式化 SQL 敘述  -->
        <prop key="hibernate.hbm2ddl.auto" >create</prop>                         <!-- 建立表結構，(create 策略自動建立資料庫指令碼)  -->
      </props>
    </property>
  </bean>
 
 
  <!-- 
         在Spring 裡，Hiberate 的資源要交給 Spring 管理。Hibernate 及其 SessionFactory 等只是 Spring 一個特殊的 Bean ，
      由 Spring 負責產生實體與銷毀。因此，DAO 層只要繼承 org.springframework.orm.hibernate3.support.HibernateDaoSupport ，
      而不需要與 Hibernate 的 API 打交道，不需要開啟、關閉 Hibernate 的 Session、Transaction 、Spring 會自動維護這些物件。
  -->
  <!-- Cat DAO 物件 -->
  <bean id="catDao" class="com.spring.orm.dao.impl.CatDaoImpl" >
     <property name="sessionFactory" >
       <ref bean="sessionFactoryBean" />    <!-- 設定 SessionFactory 實現類別   -->
     </property>
  </bean>
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
</beans>
/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.struts.action;

import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.springframework.util.Assert;
import org.springframework.web.struts.ActionSupport;

import com.spring.orm.entity.Cat;
import com.spring.orm.service.ICatService;
import com.struts.form.CatForm;

/** 
 * MyEclipse Struts
 * Creation date: 12-27-2012
 * 
 * XDoclet definition:
 * @struts.action path="/cat" name="catForm" input="/form/cat.jsp" scope="request" validate="true"
 */
/*
 *  SpringFramework 提供 ActionSupport 類別來支援 Struts1.x 的 Action。
 *  繼承了 org.springframework.web.struts.ActionSupport  後就能夠獲得 Spring 的 BeanFactory，
 *  從而獲得各種 Spring 容器內的各項資源，例如資料來源、Service 物件等。
 *  
 *  更改 CatAction 的程式碼，使 CatAction 直接繼承 Spring 的 ActionSupport 類別。
 *  繼承 ActionSupport 後便能夠透過 Spring 的方法獲得 catService 物件。
 *  CatAction 實現了增加 Cat 與列出所有 Cat 的功能。 
 *  
 *  
 *      繼承方式融入 Spring 非常簡單，只需要繼承 ActionSupport 即可。缺點是 Action 程式碼與 Spring 發生了耦合。
 *  並且繼承方式的 Action 並沒有交給 Spring 管理，因此不能使用 Spring 的 AOP、IoC 等待性，也不能使用 Spring 的攔截器，
 *  Spring 的功能會大打折扣。
 *      如果把 Action 用代理的方式設定到 Spring ，則不存在這些問題。 Spring 中可以對代理方式的 Action 設定任意數目、
 *  任意類型的攔截器，非常靈活，而且 Action 與 Spring、Hibernate 等沒有任何耦合。
 *  
 */
public class CatAction extends ActionSupport{
	
	
	// 獲得 Service 物件
    private ICatService getCatService(){
      return (ICatService) getWebApplicationContext().getBean("catService");	
    }
    
	
    
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response) {
	  CatForm catForm = (CatForm) form;
		
	  if("add".equals(catForm.getAction())){
	    return this.add(mapping, catForm, request, response);
	  }else{
		return this.list(mapping, catForm, request, response);
	  }
	} // end execute
	
	
	
	/** 
	 * Method add
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	// 增加 Cat 物件
	public ActionForward add(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){
		
	  // CatForm 物件
      CatForm catForm = (CatForm)form;
      
      // 判斷名字非為空
      Assert.hasLength(catForm.getName(),"名字不能為null");
      
      
      Cat cat = new Cat();
      cat.setName(catForm.getName());
      cat.setCreateDate(new Date());
      
      // 獲得 Service 物件
      ICatService catService = getCatService();
     
      // 儲存 Cat 物件
      catService.createCat(cat);
      
	  return this.list(mapping, catForm, request, response);	   // 列出所有的 Cat 物件
	} // end add

	
	
	
	/** 
	 * Method list
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	// 列出所有的 Cat 物件
	public ActionForward list(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){
		
	  // 獲得 Service 物件
      ICatService catService = getCatService();
      
      // 列出所有 Cat
      List<Cat> catList = catService.listCats();
   
      // 將 List Cat 物件放入 request 中
      request.setAttribute("catList",catList);
      
	  return mapping.findForward("list");    // 傳回 list 頁面
	} // end list

	
}
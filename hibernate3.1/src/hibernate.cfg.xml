<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE hibernate-configuration PUBLIC
          "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
          "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">

<!-- Generated by MyEclipse Hibernate Tools.                   -->

<hibernate-configuration>

  <session-factory>
        
        
    <!-- 指定使用 MySQL 資料庫格式的SQL 敘述 -->
    <property name="dialect">org.hibernate.dialect.MySQLDialect</property> 
        
    <!-- 資料庫連接 URL  -->
    <property name="connection.url">jdbc:mysql://localhost:3306/hibernate3.11?characterEncoding=UTF-8</property>
   
    <property name="hibernate.connection.useUnicode">true</property> 
    <property name="hibernate.connection.characterEncoding">UTF-8</property> 
    <property name="hibernate.connection.charSet">UTF-8</property> 


    <!-- 資料庫驅動類別 -->
    <property name="connection.driver_class">com.mysql.jdbc.Driver</property>   
        
    <!-- 使用者名稱 -->
    <property name="connection.username">root</property>
        
    <!-- 密碼  -->
    <property name="connection.password">19786779</property>
        

        
        
    <!-- 連接池大小(最大連接數) -->
	<!-- Hibernate 內建的連接池比較簡單，效率有限，僅僅用於學習和示範目的。 -->
	<!-- 
      <property name="connection.pool_size" >10</property>
	-->

	<!-- 連接池大小(最大連接數) -->
	<!-- 
		C3P0 是個開放原始碼的連接池，Hibernate 的 lib 包裡附帶著 C3P0。
		只要在 Hibernate 參數裡設定 hibernate.c3p0.* 參數，
		Hibernate 就自動使用 C3P0 作為連接池實現。
	-->
	<property name="c3p0.min_size">5</property>
	<property name="c3p0.max_size">20</property>
	<property name="c3p0.timeout">1800</property>
	<property name="c3p0.max_statements">50</property>
     
     
    <!-- 指定在控制台列印產生的SQL敘述  -->
	<property name="show_sql">true</property>



	<!-- 指定Hibernate 啟動的時候自動建立表格結構,Hiberate 會自動根據實體類別建立資料表，因此只建立資料庫就可以了  -->
	<!--
	    hbm2ddl.auto 不是必須的，如果不設定 hibm2ddl 屬性，需要使用SQL 初始化資料庫結構。hibm2ddl auto 取值與作用如下所示：
		hbm2ddl.auto 設定值
		1.create     : 載入 SessionFactory 時建立資料表結構。如果原表結構存在，則先刪除原表結構。
		                                        如果 classpath 目錄下有 import.sql 檔案，建立表結構後會執行 import.sql 裡的SQL 敘述。
		2.create-drop: 載入 SessionFactory 時建立資料表結構，移除 SessionFactory 時(一般為程式退出時)刪除表結構。
		                                        如果 classpath 根目錄有 import.sql 檔案，建立表結構會執行 import.sql 裡的SQL 敘述。
		3.update     : 載入SessionFactory 時檢查資料表結構，如果與 Entity 不一致，則更新表結構。
		4.validate   : 載入 SessionFactory 時檢查資料表結構。
	-->
	<property name="hbm2ddl.auto">create</property>

	
	
	
	
	<!-- 要加這一句， 否則可能會遇到例外 -->
	<!-- ※ 極重要： thread：其它容器如：Tomcat 容器、jta：使用JBoss 容器  -->
	<property name="current_session_context_class">thread</property>
	<!-- 
		1. thread： Tomcat 容器(非JBoss 容器)
		2. jta：JBoss 容器
	-->
	
	
	
	

    <!-- ***************** 實體類別以 JPA 規範的 處理(開始) ***************** -->	
    
    <!-- 第20章：Hibernate 入門   的範例  -->
        
	<!-- 第一個 Hibernate Web 程式 -->
    <mapping class="com.helloweenvsfei.hibernate.bean.Cat"    />	
    <mapping class="com.helloweenvsfei.hibernate.bean.Cat1"   />	
    <mapping class="com.helloweenvsfei.hibernate.bean.Event"  />	





    <!-- 第23章：Hibernate 實體關係映射 的範例  -->
    
    <!-- 單邊的一對多關聯性：電子郵件管理 -->	
	<mapping class="com.helloweenvsfei.hibernate.bean.Person2"  />
	<mapping class="com.helloweenvsfei.hibernate.bean.Email"    />

    <mapping class="com.helloweenvsfei.hibernate.bean.Person3"  />
	
		
    <!-- 單邊的多對一關聯性：論文管理 -->	
    <mapping class="com.helloweenvsfei.hibernate.bean.Type"     />
    <mapping class="com.helloweenvsfei.hibernate.bean.Article"  />
   		
			
	<!-- 雙邊的多對一、一對多的關聯性：班級與學生屬性 -->	
    <mapping class="com.helloweenvsfei.hibernate.bean.Clazz"     />
    <mapping class="com.helloweenvsfei.hibernate.bean.Student"   />
   			
	
    <!-- 單邊的多對多關係：論壇文章管理 -->	
    <mapping class="com.helloweenvsfei.hibernate.bean.Tag"       />
    <mapping class="com.helloweenvsfei.hibernate.bean.Post"      />
    
    	
    <!-- 單邊的一對一關聯性：艦船管理 -->	
    <mapping class="com.helloweenvsfei.hibernate.bean.Ship"       />
    <mapping class="com.helloweenvsfei.hibernate.bean.Sailor"     />
    
    
    <!-- 主鍵相同的一對一關聯性：客戶位址管理  -->	
    <mapping class="com.helloweenvsfei.hibernate.bean.Customer"    />
    <mapping class="com.helloweenvsfei.hibernate.bean.Address"     />
    
    
    
    
    
    
    
    
    
    <!-- 第25章：Hibernate 高級查詢  -->	
    <mapping class="com.helloweenvsfei.hibernate.bean.Employee"      />
    <mapping class="com.helloweenvsfei.hibernate.bean.Department"    />   
       
    <!-- ***************** 實體類別以 JPA 規範的 處理(結束 ***************** -->	

	      
	      
	      
	      
  </session-factory>



</hibernate-configuration>